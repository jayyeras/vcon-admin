services:
  mongo:
    container_name: "mongo"
    image: mongo
    restart: always
    environment:
      MONGO_INITDB_ROOT_USERNAME: "${MONGO_INITDB_ROOT_USERNAME:-root}"
      MONGO_INITDB_ROOT_PASSWORD: "${MONGO_INITDB_ROOT_PASSWORD:-example}"
    ports:
      - "27017:27017"
    volumes:
      - .data/db:/data/db
    profiles:
      - prod
      - standalone
    networks:
      - conserver
  
  mongo-express:
    container_name: "mongo-express"
    image: mongo-express
    restart: always
    environment:
      ME_CONFIG_MONGODB_ADMINUSERNAME: "${MONGO_INITDB_ROOT_USERNAME:-root}"
      ME_CONFIG_MONGODB_ADMINPASSWORD: "${MONGO_INITDB_ROOT_PASSWORD:-example}"
      ME_CONFIG_MONGODB_URL: "${MONGO_URL:-mongodb://root:example@mongo:27017/}"
      ME_CONFIG_BASICAUTH: false
      ME_CONFIG_SITE_BASEURL: "/mongo-express"
    ports:
      - "8081:8081"
    profiles:
      - dev
      - standalone  
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.mongo-express.entrypoints=websecure"
      - "traefik.http.routers.mongo-express.tls.certresolver=myresolver"
      - "traefik.http.routers.mongo-express.rule=Host(`${DNS_HOST}`) && PathPrefix(`/mongo-express`)"
      - "traefik.http.routers.mongo-express.middlewares=auth-middleware@file"
      - "traefik.http.services.mongo-express.loadbalancer.server.port=8081"  # Add this label
    networks:
      - conserver


  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.13.4
    container_name: "elasticsearch"
    environment:
      - node.name=elasticsearch
      - discovery.type=single-node
      - ELASTIC_USERNAME="${ELASTIC_USERNAME:-elastic}"
      - ELASTIC_PASSWORD="${ELASTIC_PASSWORD:-changeme}"
    mem_limit: 1g
    volumes:
      - es_data:/usr/share/elasticsearch/data
    profiles:
      - dev
      - standalone
    networks:
      - conserver

  metabase:
    image: metabase/metabase:latest
    container_name: "metabase"
    profiles:
      - dev
      - standalone
    ports:
      - "3000:3000"
    environment:
      - MB_SITE_URL=https://mindmakingportal.demos.strolid.net/metabase
      - MB_DB_FILE=/metabase-data/metabase.db
    labels:
      - "traefik.enable=true"
      - "traefik.http.services.metabase.loadbalancer.server.port=3000"  # Add this label
      - "traefik.http.routers.metabase.rule=Host(`${DNS_HOST}`) && PathPrefix(`/metabase/`)"
      - "traefik.http.routers.metabase.entrypoints=websecure"
      - "traefik.http.routers.metabase.tls.certresolver=myresolver"
      - "traefik.http.middlewares.strip-metabase-prefix.stripprefix.prefixes=/metabase"
      - "traefik.http.routers.metabase.middlewares=auth-middleware@file,strip-metabase-prefix"
      - "traefik.http.routers.metabase.priority=20"  # Add this to metabase labels
    networks:
      - conserver
    volumes:
      - .metabase-data:/metabase-data

  traefik:
    # The official v3 Traefik docker image
    image: traefik:v3.2
    container_name: "traefik"
    # Enables the web UI and tells Traefik to listen to docker
    command: 
      - "--api.insecure=true"
      - "--providers.docker"
      - "--providers.file.directory=/etc/traefik/dynamic" 
      - "--entrypoints.web.address=:80"
      - "--entrypoints.websecure.address=:443"
      - "--certificatesresolvers.myresolver.acme.tlschallenge=true"
      - "--certificatesresolvers.myresolver.acme.email=${DNS_REGISTRATION_EMAIL}"
      - "--certificatesresolvers.myresolver.acme.storage=/letsencrypt/acme.json"

    ports:
      # The HTTP port
      - "80:80"
      - "443:443"
      # The Web UI (enabled by --api.insecure=true)
      - "8080:8080"
    volumes:
      # So that Traefik can listen to the Docker events
      - ./traefik.yml:/etc/traefik/traefik.yml
      - /var/run/docker.sock:/var/run/docker.sock
      - ./dynamic:/etc/traefik/dynamic
      - "./letsencrypt:/letsencrypt"

    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.traefik.rule=PathPrefix(`/traefik`) "
      - "traefik.http.routers.traefik.service=api@internal"

    networks:
      - conserver

  admin:
    container_name: "admin"
    build:
      dockerfile: ./Dockerfile
      context: .
    command: "streamlit run ./admin.py --server.port 8501 --server.baseUrlPath /admin"
    ports:
      - "8501:8501"
    volumes:
      - .:/app
      - /var/run/docker.sock:/var/run/docker.sock
    depends_on:
      - mongo
      - elasticsearch
    stop_grace_period: 60s
    profiles:
      - dev
      - prod
      - standalone
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.admin.rule=Host(`${DNS_HOST}`) && PathPrefix(`/admin`) "
      - "traefik.http.routers.admin.entrypoints=websecure"
      - "traefik.http.routers.admin.tls.certresolver=myresolver"
      - "traefik.http.routers.admin.middlewares=auth-middleware@file"      
      - "traefik.http.services.admin.loadbalancer.server.port=8501"
    networks:
      - conserver

  wordpress:
      image: wordpress:latest
      container_name: "wordpress"
      restart: always
      environment:
        - WORDPRESS_DB_HOST=wordpress-db
        - WORDPRESS_DB_USER=${WORDPRESS_DB_USER:-wordpress}
        - WORDPRESS_DB_PASSWORD=${WORDPRESS_DB_PASSWORD:-wordpress_password}
        - WORDPRESS_DB_NAME=${WORDPRESS_DB_NAME:-wordpress}
      volumes:
        - wordpress_data:/var/www/html
      depends_on:
        - wordpress-db
      profiles:
        - prod
        - standalone
      labels:
        - "traefik.enable=true"
        - "traefik.http.routers.wordpress.rule=Host(`${DNS_HOST}`)"
        - "traefik.http.routers.wordpress.entrypoints=websecure"
        - "traefik.http.routers.wordpress.tls.certresolver=myresolver"
        - "traefik.http.services.wordpress.loadbalancer.server.port=80"
        - "traefik.http.routers.wordpress.priority=10"
      networks:
        - conserver

  wordpress-db:
    image: mysql:8.0
    container_name: "wordpress-db"
    restart: always
    environment:
      - MYSQL_DATABASE=${WORDPRESS_DB_NAME:-wordpress}
      - MYSQL_USER=${WORDPRESS_DB_USER:-wordpress}
      - MYSQL_PASSWORD=${WORDPRESS_DB_PASSWORD:-wordpress_password}
      - MYSQL_RANDOM_ROOT_PASSWORD=yes
    volumes:
      - wordpress_db_data:/var/lib/mysql
    profiles:
      - prod
      - standalone
    networks:
      - conserver


volumes:
  es_data:
    driver: local
  mongo-data:
    driver: local
  wordpress_data:
    driver: local
  wordpress_db_data:
    driver: local

# docker-compose-1.yml
networks:
  conserver:
